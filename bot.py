"""
–û—Å–Ω–æ–≤–Ω–æ–π –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Å–∫—Ä–∏–ø—Ç-—Ñ–∞–π–ª
"""

import logging
import time

from telebot import TeleBot

from config import BOT_TOKEN, MAX_SESSIONS, LOG_FILE_PATH
from database import Database
from gpt import GPT
from statics import get_genre_keyboard, get_hero_keyboard, get_setting_keyboard


bot = TeleBot(token=BOT_TOKEN)
db = Database()
gpt = GPT()
'''
token_data = gpt.create_new_token()
expires_at = time.time() + token_data["expires_in"]
if expires_at < time.time():
    gpt.create_new_token()
'''
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    filename=LOG_FILE_PATH,
    filemode="a",
)


@bot.message_handler(commands=["start"])
def start_command(message):
    user_name = message.from_user.first_name
    bot.send_message(message.from_user.id, text=f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, {user_name}!")
    db.create_db_table()


@bot.message_handler(commands=["help"])
def help_command(message):
    bot.send_message(
        message.from_user.id,
        text="–Ø —Ç–≤–æ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ üëæ –£–∑–Ω–∞—Ç—å –æ–±–æ –º–Ω–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /about",
    )


@bot.message_handler(commands=["about"])
def about_command(message):
    bot.send_message(
        message.from_user.id,
        text="–†–∞–¥, —á—Ç–æ —Ç—ã –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω_–∞! –ú–æ–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –Ω–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å —Ç–µ–±—è –≤ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–µ –∏ –≤—Å—è—á–µ—Å–∫–∏ –ø–æ–¥–±–∞–¥—Ä–∏–≤–∞—Ç—å! ü§çü§ç"
        " –° –ø–æ–º–æ—â—å—é GPT —Å–æ—Å—Ç–∞–≤–ª—é —Å —Ç–æ–±–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É /create, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å "
        "—Å–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏, /continue - –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, /end - —É–≤–∏–¥–µ—Ç—å –∫–æ–Ω–µ—Ü, –∞ —Ç–∞–∫–∂–µ –≤—Å–µ –ø–æ–ª—É—á–∏–≤—à–µ–µ—Å—è."
        " –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –≤–≤–æ–¥–∏—Ç–µ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å—Ç–æ–∏—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –≤–≤–æ–¥ üñ§",
    )


@bot.message_handler(commands=["debug"])
def send_logs(message):
    with open("log_file.txt", "rb") as f:
        bot.send_document(message.chat.id, f)


@bot.message_handler(commands=["create"])
def create_story(message):
    sessions_id = 0
    sessions_id += 1
    if db.is_limit_users():
        bot.send_message(
            message.from_user.id,
            text="–õ–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏—Å—á–µ—Ä–ø–∞–Ω",
        )
        return

    if sessions_id < MAX_SESSIONS:
        bot.send_message(
            message.from_user.id,
            text="–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä —Å–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–∏",
            reply_markup=get_genre_keyboard(),
        )
        bot.register_next_step_handler(message, choose_genre)
    else:
        bot.send_message(message.from_user.id, text="–õ–∏–º–∏—Ç —Å–µ—Å—Å–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω")


def choose_genre(message):
    GENRES = ["–ö–æ–º–µ–¥–∏—è", "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "–î—Ä–∞–º–∞"]
    if message.text not in GENRES:
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä",
            reply_markup=get_genre_keyboard(),
        )
        bot.register_next_step_handler(message, choose_genre)
        return

    db.update_data(message.from_user.id, "genre", message.text)

    bot.send_message(
        message.from_user.id,
        text="–í—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–∏",
        reply_markup=get_hero_keyboard(),
    )

    bot.register_next_step_handler(message, choose_hero)


def choose_hero(message):
    HEROES = ["–°–µ—Ä–µ–Ω–∞ –≤–∞–Ω –¥–µ—Ä –í—É–¥—Å–µ–Ω", "–ë–ª—ç—Ä –£–æ–ª–¥–æ—Ä—Ñ", "–ß–µ–ª–æ–≤–µ–∫-–ø–∞—É–∫", "–ö–æ—Ç –ú–∞—Ä–∫—É—Å"]
    if message.text not in HEROES:
        bot.send_message(
            message.from_user.id,
            text="–í—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–∏",
            reply_markup=get_hero_keyboard(),
        )
        bot.register_next_step_handler(message, choose_hero)
        return

    db.update_data(message.from_user.id, "hero", message.text)

    bot.send_message(
        message.from_user.id,
        text="–í—ã–±–µ—Ä–∏ —Å–µ—Ç—Ç–∏–Ω–≥ –¥–ª—è —Å–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–∏",
        reply_markup=get_setting_keyboard(),
    )

    bot.register_next_step_handler(message, choose_setting)


def choose_setting(message):
    SETTINGS = [
        "–ù—å—é-–ô–æ—Ä–∫ - –≥–æ—Ä–æ–¥ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–æ–≤",
        "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ - –≥–æ—Ä–æ–¥ –Ω–∞—à",
        "–í—Å–µ–ª–µ–Ω–Ω–∞—è 2041",
        "–¶–∞—Ä—Å—Ç–≤–æ –§–∏–ª–æ—Ä–∏",
    ]

    if message.text not in SETTINGS:
        bot.send_message(
            message.from_user.id,
            text="–í—ã–±–µ—Ä–∏ —Å–µ—Ç—Ç–∏–Ω–≥ –¥–ª—è —Å–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–∏",
            reply_markup=get_hero_keyboard(),
        )
        bot.register_next_step_handler(message, choose_setting)
        return

    db.update_data(message.from_user.id, "setting", message.text)

    bot.send_message(message.chat.id, "–£–∫–∞–∂–∏ —á—Ç–æ –µ—â–µ —Ö–æ—á–µ—à—å —É—á–µ—Å—Ç—å –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏")
    bot.register_next_step_handler(message, add_info)


def add_info(message):
    user_id = message.from_user.id

    helper_prompt = message.text
    db.update_data(user_id, "content", helper_prompt)

    bot.send_message(message.chat.id, "–í—Å–µ —É—á—Ç–µ–º!")
    user_info = db.get_data(message.from_user.id)

    mode = "create"

    gpt.ask_gpt(user_info, helper_prompt, mode, user_id)

    # TODO - –°–¥–µ–ª–∞—Ç—å —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –æ—Ç–≤–µ—Ç –æ—Ç GPT - –ø–æ—Ç–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞, –∞ –º–æ–∂–µ—Ç –∏ –ø—Ä–µ—Ä–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–∞—á–∞–≤ –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é

@bot.message_handler(commands=['continue_explaining'])
def continue_explaining(message):
    user_id = message.from_user.id
    mode = "continue"
    gpt.ask_gpt(user_id, mode)


@bot.message_handler(commands=['end'])
def end(message):
    user_id = message.from_user.id
    mode = "end"
    gpt.ask_gpt(user_id, mode)


bot.polling()
